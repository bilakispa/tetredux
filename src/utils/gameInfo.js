export const INITIAL_POS_X = 3;
export const INITIAL_POS_Y = -3;

const COLOR_INDEX = {
	CLEAR: 0,
	O: 1,
	I: 2,
	T: 3,
	S: 4,
	Z: 5,
	J: 6,
	L: 7,
};

const EMPTY_TETROMINO = [
	[
		[
			COLOR_INDEX.CLEAR,
			COLOR_INDEX.CLEAR,
			COLOR_INDEX.CLEAR,
			COLOR_INDEX.CLEAR,
		],
		[
			COLOR_INDEX.CLEAR,
			COLOR_INDEX.CLEAR,
			COLOR_INDEX.CLEAR,
			COLOR_INDEX.CLEAR,
		],
		[
			COLOR_INDEX.CLEAR,
			COLOR_INDEX.CLEAR,
			COLOR_INDEX.CLEAR,
			COLOR_INDEX.CLEAR,
		],
		[
			COLOR_INDEX.CLEAR,
			COLOR_INDEX.CLEAR,
			COLOR_INDEX.CLEAR,
			COLOR_INDEX.CLEAR,
		],
	],
];

const TETROMINOES = {
	O: [
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.O,
				COLOR_INDEX.O,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.O,
				COLOR_INDEX.O,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
	],
	I: [
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[COLOR_INDEX.I, COLOR_INDEX.I, COLOR_INDEX.I, COLOR_INDEX.I],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.I,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.I,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.I,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.I,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[COLOR_INDEX.I, COLOR_INDEX.I, COLOR_INDEX.I, COLOR_INDEX.I],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.I,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.I,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.I,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.I,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
	],
	T: [
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[COLOR_INDEX.T, COLOR_INDEX.T, COLOR_INDEX.T, COLOR_INDEX.CLEAR],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.T,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.T,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.T,
				COLOR_INDEX.T,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.T,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.T,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[COLOR_INDEX.T, COLOR_INDEX.T, COLOR_INDEX.T, COLOR_INDEX.CLEAR],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.T,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.T,
				COLOR_INDEX.T,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.T,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
	],
	S: [
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.S,
				COLOR_INDEX.S,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.S,
				COLOR_INDEX.S,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.S,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.S,
				COLOR_INDEX.S,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.S,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
	],
	Z: [
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.Z,
				COLOR_INDEX.Z,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.Z,
				COLOR_INDEX.Z,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.Z,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.Z,
				COLOR_INDEX.Z,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.Z,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
	],
	J: [
		[
			[
				COLOR_INDEX.J,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[COLOR_INDEX.J, COLOR_INDEX.J, COLOR_INDEX.J, COLOR_INDEX.CLEAR],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.J,
				COLOR_INDEX.J,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.J,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.J,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[COLOR_INDEX.J, COLOR_INDEX.J, COLOR_INDEX.J, COLOR_INDEX.CLEAR],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.J,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.J,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.J,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.J,
				COLOR_INDEX.J,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
	],
	L: [
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[COLOR_INDEX.L, COLOR_INDEX.L, COLOR_INDEX.L, COLOR_INDEX.CLEAR],
			[
				COLOR_INDEX.L,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.L,
				COLOR_INDEX.L,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.L,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.L,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.L,
				COLOR_INDEX.CLEAR,
			],
			[COLOR_INDEX.L, COLOR_INDEX.L, COLOR_INDEX.L, COLOR_INDEX.CLEAR],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
		[
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.L,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.L,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.L,
				COLOR_INDEX.L,
				COLOR_INDEX.CLEAR,
			],
			[
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
				COLOR_INDEX.CLEAR,
			],
		],
	],
};

const random = (max) => {
	return Math.floor(Math.random() * max);
};

export const getEmptyTetromino = () => {
	return EMPTY_TETROMINO;
};

export const getRandomTetromino = () => {
	const tetrominoKeys = Object.keys(TETROMINOES);
	const randomTetrominoKey = tetrominoKeys[random(tetrominoKeys.length)];
	return TETROMINOES[randomTetrominoKey];
};

const GAME_FIELD_ROWS = 20;
const GAME_FIELD_COLUMNS = 10;
export const getInitialGameField = () => {
	return new Array(GAME_FIELD_ROWS)
		.fill()
		.map(() => new Array(GAME_FIELD_COLUMNS).fill(COLOR_INDEX.CLEAR));
};
